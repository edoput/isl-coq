opam-version: "2.0"
compiler: [
  "base-bigarray.base"
  "base-threads.base"
  "base-unix.base"
  "ocaml.4.10.0"
  "ocaml-base-compiler.4.10.0"
  "ocaml-config.1"
]
roots: [
  "coq.8.14.1"
  "coq-iris.dev.2021-12-16.0.f083f007"
  "coq-iris-heap-lang.dev.2021-12-16.0.f083f007"
  "coq-stdpp.dev.2021-12-09.0.e6194e28"
  "ocaml-base-compiler.4.10.0"
]
installed: [
  "base-bigarray.base"
  "base-threads.base"
  "base-unix.base"
  "conf-findutils.1"
  "conf-gmp.4"
  "coq.8.14.1"
  "coq-iris.dev.2021-12-16.0.f083f007"
  "coq-iris-heap-lang.dev.2021-12-16.0.f083f007"
  "coq-stdpp.dev.2021-12-09.0.e6194e28"
  "dune.3.2.0"
  "ocaml.4.10.0"
  "ocaml-base-compiler.4.10.0"
  "ocaml-config.1"
  "ocamlfind.1.9.3"
  "zarith.1.12"
]
package "base-bigarray" {
  opam-version: "2.0"
  version: "base"
  synopsis: ""
  description: "Bigarray library distributed with the OCaml compiler"
  maintainer: "https://github.com/ocaml/opam-repository/issues"
}
package "base-threads" {
  opam-version: "2.0"
  version: "base"
  synopsis: ""
  description: "Threads library distributed with the OCaml compiler"
  maintainer: "https://github.com/ocaml/opam-repository/issues"
}
package "base-unix" {
  opam-version: "2.0"
  version: "base"
  synopsis: ""
  description: "Unix library distributed with the OCaml compiler"
  maintainer: "https://github.com/ocaml/opam-repository/issues"
}
package "conf-findutils" {
  opam-version: "2.0"
  version: "1"
  synopsis: "Virtual package relying on findutils"
  description:
    "This package can only install if the findutils binary is installed on the system."
  authors: "GNU Project"
  license: "GPL-3.0-or-later"
  homepage: "https://www.gnu.org/software/findutils/"
  bug-reports: "https://github.com/ocaml/opam-repository/issues"
  flags: conf
  build: ["sh" "-exc" "find . -name ."]
  depexts: [
    ["findutils"] {os-family = "debian"}
    ["findutils"] {os-distribution = "fedora"}
    ["findutils"] {os-distribution = "rhel"}
    ["findutils"] {os-distribution = "centos"}
    ["findutils"] {os-distribution = "alpine"}
    ["findutils"] {os-distribution = "nixos"}
    ["findutils"] {os-family = "suse"}
    ["findutils"] {os-distribution = "ol"}
    ["findutils"] {os-distribution = "arch"}
    ["system:findutils"] {os = "win32" & os-distribution = "cygwinports"}
  ]
}
package "coq-iris" {
  opam-version: "2.0"
  version: "dev.2021-12-16.0.f083f007"
  synopsis:
    "A Higher-Order Concurrent Separation Logic Framework with support for interactive proofs"
  description: """\
Iris is a framework for reasoning about the safety of concurrent programs using
concurrent separation logic. It can be used to develop a program logic, for
defining logical relations, and for reasoning about type systems, among other
applications. This package includes the base logic, Iris Proof Mode (IPM) /
MoSeL, and a general language-independent program logic; see coq-iris-heap-lang
for an instantiation of the program logic to a particular programming language."""
  maintainer: "Ralf Jung <jung@mpi-sws.org>"
  authors: "The Iris Team"
  license: "BSD-3-Clause"
  tags: [
    "logpath:iris.prelude"
    "logpath:iris.algebra"
    "logpath:iris.si_logic"
    "logpath:iris.bi"
    "logpath:iris.proofmode"
    "logpath:iris.base_logic"
    "logpath:iris.program_logic"
  ]
  homepage: "https://iris-project.org/"
  bug-reports: "https://gitlab.mpi-sws.org/iris/iris/issues"
  depends: [
    "coq" {(>= "8.12" & < "8.16~") | (= "dev")}
    "coq-stdpp" {(= "dev.2021-12-09.0.e6194e28") | (= "dev")}
  ]
  build: ["./make-package" "iris" "-j%{jobs}%"]
  install: ["./make-package" "iris" "install"]
  dev-repo: "git+https://gitlab.mpi-sws.org/iris/iris.git"
  url {
    src:
      "git+https://gitlab.mpi-sws.org/iris/iris.git#f083f00764066fea24025a1871822fc1a8d36c58"
  }
}
package "coq-iris-heap-lang" {
  opam-version: "2.0"
  version: "dev.2021-12-16.0.f083f007"
  synopsis: "The canonical example language for Iris"
  description: """\
This package defines HeapLang, a concurrent lambda calculus with references, and
uses Iris to build a program logic for HeapLang programs."""
  maintainer: "Ralf Jung <jung@mpi-sws.org>"
  authors: "The Iris Team"
  license: "BSD-3-Clause"
  tags: "logpath:iris.heap_lang"
  homepage: "https://iris-project.org/"
  bug-reports: "https://gitlab.mpi-sws.org/iris/iris/issues"
  depends: [
    "coq-iris" {= version}
  ]
  build: ["./make-package" "iris_heap_lang" "-j%{jobs}%"]
  install: ["./make-package" "iris_heap_lang" "install"]
  dev-repo: "git+https://gitlab.mpi-sws.org/iris/iris.git"
  url {
    src:
      "git+https://gitlab.mpi-sws.org/iris/iris.git#f083f00764066fea24025a1871822fc1a8d36c58"
  }
}
package "coq-stdpp" {
  opam-version: "2.0"
  version: "dev.2021-12-09.0.e6194e28"
  synopsis: "An extended \"Standard Library\" for Coq"
  description: """\
The key features of this library are as follows:

- It provides a great number of definitions and lemmas for common data
  structures such as lists, finite maps, finite sets, and finite multisets.
- It uses type classes for common notations (like `∅`, `∪`, and Haskell-style
  monad notations) so that these can be overloaded for different data structures.
- It uses type classes to keep track of common properties of types, like it
  having decidable equality or being countable or finite.
- Most data structures are represented in canonical ways so that Leibniz
  equality can be used as much as possible (for example, for maps we have
  `m1 = m2` iff `∀ i, m1 !! i = m2 !! i`). On top of that, the library provides
  setoid instances for most types and operations.
- It provides various tactics for common tasks, like an ssreflect inspired
  `done` tactic for finishing trivial goals, a simple breadth-first solver
  `naive_solver`, an equality simplifier `simplify_eq`, a solver `solve_proper`
  for proving compatibility of functions with respect to relations, and a solver
  `set_solver` for goals involving set operations.
- It is entirely dependency- and axiom-free."""
  maintainer: "Ralf Jung <jung@mpi-sws.org>"
  authors: "The std++ team"
  license: "BSD-3-Clause"
  tags: "logpath:stdpp"
  homepage: "https://gitlab.mpi-sws.org/iris/stdpp"
  bug-reports: "https://gitlab.mpi-sws.org/iris/stdpp/issues"
  depends: [
    "coq" {(>= "8.11" & < "8.16~") | (= "dev")}
  ]
  build: [make "-j%{jobs}%"]
  install: [make "install"]
  dev-repo: "git+https://gitlab.mpi-sws.org/iris/stdpp.git"
  url {
    src:
      "git+https://gitlab.mpi-sws.org/iris/stdpp.git#e6194e280bead772462187022e4015db71b89b1d"
  }
}
package "dune" {
  x-commit-hash: "43af00f79e41ce9101d42b36dab13e1f68d49a7a"
  opam-version: "2.0"
  version: "3.2.0"
  synopsis: "Fast, portable, and opinionated build system"
  description: """\
dune is a build system that was designed to simplify the release of
Jane Street packages. It reads metadata from "dune" files following a
very simple s-expression syntax.

dune is fast, has very low-overhead, and supports parallel builds on
all platforms. It has no system dependencies; all you need to build
dune or packages using dune is OCaml. You don't need make or bash
as long as the packages themselves don't use bash explicitly.

dune supports multi-package development by simply dropping multiple
repositories into the same directory.

It also supports multi-context builds, such as building against
several opam roots/switches simultaneously. This helps maintaining
packages across several versions of OCaml and gives cross-compilation
for free."""
  maintainer: "Jane Street Group, LLC <opensource@janestreet.com>"
  authors: "Jane Street Group, LLC <opensource@janestreet.com>"
  license: "MIT"
  homepage: "https://github.com/ocaml/dune"
  doc: "https://dune.readthedocs.io/"
  bug-reports: "https://github.com/ocaml/dune/issues"
  depends: [
    ("ocaml" {>= "4.08"} | ("ocaml" {< "4.08~~"} & "ocamlfind-secondary"))
    "base-unix"
    "base-threads"
  ]
  conflicts: [
    "merlin" {< "3.4.0"}
    "ocaml-lsp-server" {< "1.3.0"}
    "dune-configurator" {< "2.3.0"}
    "odoc" {< "2.0.1"}
    "dune-release" {< "1.3.0"}
    "js_of_ocaml-compiler" {< "3.6.0"}
    "jbuilder" {= "transition"}
  ]
  build: [
    ["ocaml" "bootstrap.ml" "-j" jobs]
    [
      "./dune.exe"
      "build"
      "dune.install"
      "--release"
      "--profile"
      "dune-bootstrap"
      "-j"
      jobs
    ]
  ]
  dev-repo: "git+https://github.com/ocaml/dune.git"
  url {
    src:
      "https://github.com/ocaml/dune/releases/download/3.2.0/chrome-trace-3.2.0.tbz"
    checksum: [
      "sha256=bd1fbce6ae79ed1eb26fa89bb2e2e23978afceb3f53f5578cf1bdab08a1ad5bc"
      "sha512=b99e82d7e2233a9dd8c1fae591a03f9470fcdf9750d0e428cee2d4c8bcfa4da1595e9e10af2f234279a6ca8a120a773b247d4761d2c39210fc6101076631690e"
    ]
  }
}
package "ocaml" {
  opam-version: "2.0"
  version: "4.10.0"
  synopsis: "The OCaml compiler (virtual package)"
  description: """\
This package requires a matching implementation of OCaml,
and polls it to initialise specific variables like `ocaml:native-dynlink`"""
  maintainer: "platform@lists.ocaml.org"
  authors: [
    "Xavier Leroy"
    "Damien Doligez"
    "Alain Frisch"
    "Jacques Garrigue"
    "Didier Rémy"
    "Jérôme Vouillon"
  ]
  license: "LGPL-2.1-or-later WITH OCaml-LGPL-linking-exception"
  homepage: "https://ocaml.org"
  bug-reports: "https://github.com/ocaml/opam-repository/issues"
  depends: [
    "ocaml-config"
    "ocaml-base-compiler" {= "4.10.0"} |
    "ocaml-variants" {>= "4.10.0" & < "4.10.1~"} |
    "ocaml-system" {>= "4.10.0" & < "4.10.1~"}
  ]
  flags: conf
  setenv: [
    [CAML_LD_LIBRARY_PATH = "%{_:stubsdir}%"]
    [CAML_LD_LIBRARY_PATH += "%{lib}%/stublibs"]
    [OCAML_TOPLEVEL_PATH = "%{toplevel}%"]
  ]
  build: [
    "ocaml" "%{ocaml-config:share}%/gen_ocaml_config.ml" _:version _:name
  ]
  build-env: CAML_LD_LIBRARY_PATH = ""
}
package "ocamlfind" {
  opam-version: "2.0"
  version: "1.9.3"
  synopsis: "A library manager for OCaml"
  description: """\
Findlib is a library manager for OCaml. It provides a convention how
to store libraries, and a file format ("META") to describe the
properties of libraries. There is also a tool (ocamlfind) for
interpreting the META files, so that it is very easy to use libraries
in programs and scripts."""
  maintainer: "Thomas Gazagnaire <thomas@gazagnaire.org>"
  authors: "Gerd Stolpmann <gerd@gerd-stolpmann.de>"
  license: "MIT"
  homepage: "http://projects.camlcity.org/projects/findlib.html"
  bug-reports: "https://github.com/ocaml/ocamlfind/issues"
  depends: [
    "ocaml" {>= "4.00.0"}
  ]
  depopts: ["graphics"]
  build: [
    [
      "./configure"
      "-bindir"
      bin
      "-sitelib"
      lib
      "-mandir"
      man
      "-config"
      "%{lib}%/findlib.conf"
      "-no-custom"
      "-no-camlp4" {!ocaml:preinstalled & ocaml:version >= "4.02.0"}
      "-no-topfind" {ocaml:preinstalled}
    ]
    [make "all"]
    [make "opt"] {ocaml:native}
  ]
  install: [
    [make "install"]
    ["install" "-m" "0755" "ocaml-stub" "%{bin}%/ocaml"] {ocaml:preinstalled}
  ]
  dev-repo: "git+https://github.com/ocaml/ocamlfind.git"
  url {
    src: "http://download.camlcity.org/download/findlib-1.9.3.tar.gz"
    checksum: [
      "md5=24047dd8a0da5322253de9b7aa254e42"
      "sha512=27cc4ce141576bf477fb9d61a82ad65f55478740eed59fb43f43edb794140829fd2ff89ad27d8a890cfc336b54c073a06de05b31100fc7c01cacbd7d88e928ea"
    ]
  }
}
package "zarith" {
  opam-version: "2.0"
  version: "1.12"
  synopsis:
    "Implements arithmetic and logical operations over arbitrary-precision integers"
  description: """\
The Zarith library implements arithmetic and logical operations over
arbitrary-precision integers. It uses GMP to efficiently implement
arithmetic over big integers. Small integers are represented as Caml
unboxed integers, for speed and space economy."""
  maintainer: "Xavier Leroy <xavier.leroy@inria.fr>"
  authors: ["Antoine Miné" "Xavier Leroy" "Pascal Cuoq"]
  homepage: "https://github.com/ocaml/Zarith"
  bug-reports: "https://github.com/ocaml/Zarith/issues"
  depends: [
    "ocaml" {>= "4.04.0"}
    "ocamlfind"
    "conf-gmp"
  ]
  build: [
    ["./configure"] {os != "openbsd" & os != "freebsd" & os != "macos"}
    [
      "sh"
      "-exc"
      "LDFLAGS=\"$LDFLAGS -L/usr/local/lib\" CFLAGS=\"$CFLAGS -I/usr/local/include\" ./configure"
    ] {os = "openbsd" | os = "freebsd"}
    [
      "sh"
      "-exc"
      "LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/usr/local/lib\" CFLAGS=\"$CFLAGS -I/opt/local/include -I/usr/local/include\" ./configure"
    ] {os = "macos" & os-distribution != "homebrew"}
    [
      "sh"
      "-exc"
      "LDFLAGS=\"$LDFLAGS -L/opt/local/lib -L/usr/local/lib\" CFLAGS=\"$CFLAGS -I/opt/local/include -I/usr/local/include\" ./configure"
    ] {os = "macos" & os-distribution = "homebrew" & arch = "x86_64"}
    [
      "sh"
      "-exc"
      "LDFLAGS=\"$LDFLAGS -L/opt/homebrew/lib\" CFLAGS=\"$CFLAGS -I/opt/homebrew/include\" ./configure"
    ] {os = "macos" & os-distribution = "homebrew" & arch = "arm64"}
    [make]
  ]
  install: [make "install"]
  dev-repo: "git+https://github.com/ocaml/Zarith.git"
  url {
    src: "https://github.com/ocaml/Zarith/archive/release-1.12.tar.gz"
    checksum: [
      "md5=bf368f3d9e20b6b446d54681afc05a04"
      "sha512=8075573ae65579a2606b37dd1b213032a07d220d28c733f9288ae80d36f8a2cc4d91632806df2503c130ea9658dc207ee3a64347c21aa53969050a208f5b2bb4"
    ]
  }
}
